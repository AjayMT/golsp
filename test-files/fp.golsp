
[def [compose {} input] input]
[def [compose { head tail... } input]
 [compose
  tail
  [head input]
 ]
]

[def [double x] [* x 2]]

[printf "%v\n" [compose { [lambda [x] [+ x 1]] double double [lambda [x] [+ x 1]] } 4]]

[def [filter f {}] {}]
[def [filter check { head tail... }]
 [if [check head]
  { head [filter check tail]... }
  [filter check tail]
 ]
]

[def [map f {}] {}]
[def [map f { head tail... }]
 { [f head] [map f tail]... }]

[printf "%v\n" [filter [lambda [x] [> x 2]] { 3 4 2 1 4 5 2 6 2 }]]
[printf "%v\n" [map [lambda [x] [* x x]] { 1 2 3 4 }]]

[def [merge l1 {}] l1]
[def [merge {} l2] l2]
[def [merge { headl taill... } { headr tailr... }]
 [if [< headl headr]
  { headl [merge taill { headr tailr... }]... }
  { headr [merge { headl taill... } tailr]... }
 ]
]

[def [len {}] 0]
[def [len { _ tail... }] [+ 1 [len tail]]]

[def [mergesort {}] {}]
[def [mergesort { x }] { x }]
[def [mergesort list]
 [do
  [def midpoint [/ [len list] 2]]
  [def left [list 0 midpoint]]
  [def right [list midpoint undefined]]
  [merge [mergesort left] [mergesort right]]
 ]
]

[printf "%v\n" [merge { 1 2 3 4 } { 4 5 6 7 8 9 }]]

[printf "%v\n" [mergesort { 1 12 3 23 41 5 4 32 12 17 20 75 23 }]]
