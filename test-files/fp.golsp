
[= [compose {} input] input]
[= [compose functions input]
 [compose [functions 0 -1] [[functions -1] input]]]

[= [double x] [* x 2]]

[printf "%v\n" [compose { [lambda [x] [+ x 1]] double double [lambda [x] [+ x 1]] } 4]]

[= [filter f {}] {}]
[= [filter check list]
 [if [check [list -1]]
  { [filter check [list 0 -1]]:: [list -1] }
  [filter check [list 0 -1]]]]

[= [map f {}] {}]
[= [map f list]
 { [map f [list 0 -1]]:: [f [list -1]] }]

[printf "%v\n" [filter [= [f x] [> x 2]] { 3 4 2 1 4 5 2 6 2 }]]
[printf "%v\n" [map double { 1 2 3 4 }]]

[= [merge l1 {}] l1]
[= [merge {} l2] l2]
[= [merge l1 l2]
 [if [< [l1 0] [l2 0]]
  { [l1 0] [merge [l1 1 undefined] [l2]]:: }
  { [l2 0] [merge l1 [l2 1 undefined]]:: }
 ]
]

[= [len {}] 0]
[= [len l] [+ 1 [len [l 1 undefined]]]]

[= [mergesort {}] {}]
[= [mergesort list]
 [if [== 1 [len list]] list
  [do
   [= midpoint [/ [len list] 2]]
   [= left [list 0 midpoint]]
   [= right [list midpoint undefined]]
   [merge [mergesort left] [mergesort right]]
  ]
 ]
]

[printf "%v\n" [mergesort { 1 12 3 23 41 5 4 32 12 17 20 75 23 }]]
