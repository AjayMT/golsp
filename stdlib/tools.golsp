
const types [require "./types.golsp"]


def [len {}] 0
def [len { _ tail... }] [+ 1 [len tail]]
def [len s] [when [types.isString s]: [len { s... }]]
const len len


def [map f {}] {}
def [map f { head tail... }] { [f... head] [map f tail]... }
def [map f s] [when [types.isString s]: [map f { s... }]]
const map map


def [filter f {}] {}
[def [filter f { head tail... }]
  if [f... head] { head [filter f tail]... } { [filter f tail]... }
]
def [filter f s] [when [types.isString s]: [filter f { s... }]]
const filter filter


[def [range begin end step]
  [when
    [== begin end]: {}
    [* [< begin end] [< step 0]]: {}
    [* [> begin end] [> step 0]]: {}
    1: { begin [range [+ begin step] end step]... }
  ]
]
[def [range begin end]
  [when
    [< end begin]: [range begin end -1]
    1: [range begin end 1]
  ]
]
def [range n] [range 0 n]
const range range


def [compose input {}] input
def [compose input { head tail... }] [compose [head... input] tail]
def [compose input functions...] [compose input functions]
const compose compose


def [join _ {}] ""
def [join sep { head }] head
def [join sep { head tail... }] [sprintf "%v%v%v" head sep [join sep tail]]
const join join


def [split f {}] {}
def [split f { head tail... }] [do
  const rest [split f tail]
  [if [f... head]
    { {} rest... }
    { { head [rest 0]... } [rest 1 undefined]... }
  ]
]
def [split f s] [when
  [types.isString s]: [map { join "" } [split f { s... }]]
]
const split split

# TODO foldl foldr

# exports
(
  "len": len
  "map": map
  "filter": filter
  "range": range
  "compose": compose
  "join": join
  "split": split
)
